/* jquery.scrollex v0.2.1 | (c) @ajlkn | github.com/ajlkn/jquery.scrollex | MIT licensed */
(function ($) {
    function parseOffset(value, elementHeight, windowHeight) {
        if (typeof value === "string") {
            if (value.endsWith("%")) {
                return (parseInt(value.slice(0, -1)) / 100) * elementHeight;
            }
            if (value.endsWith("vh")) {
                return (parseInt(value.slice(0, -2)) / 100) * windowHeight;
            }
            if (value.endsWith("px")) {
                return parseInt(value.slice(0, -2));
            }
        }
        return value;
    }

    var $window = $(window);
    var scrollexId = 1;
    var scrollexInstances = {};

    $window
        .on("scroll", function () {
            var scrollTop = $window.scrollTop();
            $.map(scrollexInstances, function (instance) {
                clearTimeout(instance.timeoutId);
                instance.timeoutId = setTimeout(function () {
                    instance.handler(scrollTop);
                }, instance.options.delay);
            });
        })
        .on("load", function () {
            $window.trigger("scroll");
        });

    $.fn.scrollex = function (options) {
        var $element = $(this);
        if (!$element.length) return $element;

        if ($element.length > 1) {
            $element.each(function () {
                $(this).scrollex(options);
            });
            return $element;
        }

        if ($element.data("_scrollexId")) return $element;

        var instanceId = scrollexId++;
        var settings = $.extend(
            {
                top: 0,
                bottom: 0,
                delay: 0,
                mode: "default",
                enter: null,
                leave: null,
                initialize: null,
                terminate: null,
                scroll: null,
            },
            options
        );

        var testVisibility;
        switch (settings.mode) {
            case "top":
                testVisibility = (t, e, n, i, o) => t >= i && o >= t;
                break;
            case "bottom":
                testVisibility = (t, e, n, i, o) => n >= i && o >= n;
                break;
            case "middle":
                testVisibility = (t, e, n, i, o) => e >= i && o >= e;
                break;
            case "top-only":
                testVisibility = (t, e, n, i, o) => i >= t && n >= i;
                break;
            case "bottom-only":
                testVisibility = (t, e, n, i, o) => n >= o && o >= t;
                break;
            default:
                testVisibility = (t, e, n, i, o) => n >= i && o >= t;
                break;
        }

        var handleScroll = function (scrollTop) {
            var viewportHeight = $window.height();
            var scrollMiddle = scrollTop + viewportHeight / 2;
            var scrollBottom = scrollTop + viewportHeight;
            var elementHeight = $element.outerHeight();
            var elementOffset = $element.offset();
            var topBoundary = elementOffset.top + parseOffset(settings.top, elementHeight, viewportHeight);
            var bottomBoundary = elementOffset.top + elementHeight - parseOffset(settings.bottom, elementHeight, viewportHeight);
            var isVisible = testVisibility(scrollTop, scrollMiddle, scrollBottom, topBoundary, bottomBoundary);

            if (isVisible !== this.state) {
                this.state = isVisible;
                if (isVisible) {
                    settings.enter && settings.enter.apply(this.element);
                } else {
                    settings.leave && settings.leave.apply(this.element);
                }
            }

            settings.scroll && settings.scroll.apply(this.element, [(scrollMiddle - topBoundary) / (bottomBoundary - topBoundary)]);
        };

        var instance = {
            id: instanceId,
            options: settings,
            test: testVisibility,
            handler: handleScroll,
            state: null,
            element: this,
            $element: $element,
            timeoutId: null,
        };

        scrollexInstances[instanceId] = instance;
        $element.data("_scrollexId", instanceId);
        settings.initialize && settings.initialize.apply(this);

        return $element;
    };

    $.fn.unscrollex = function () {
        var $element = $(this);
        if (!$element.length) return $element;

        if ($element.length > 1) {
            $element.each(function () {
                $(this).unscrollex();
            });
            return $element;
        }

        var instanceId = $element.data("_scrollexId");
        if (!instanceId) return $element;

        var instance = scrollexInstances[instanceId];
        clearTimeout(instance.timeoutId);
        delete scrollexInstances[instanceId];

        $element.removeData("_scrollexId");
        instance.options.terminate && instance.options.terminate.apply(this);

        return $element;
    };
})(jQuery);
