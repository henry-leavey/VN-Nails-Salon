/* breakpoints.js v1.0 | @ajlkn | MIT licensed */
var breakpoints = (function () {
    "use strict";

    function e(config) {
        t.init(config);
    }

    var t = {
        list: null,
        media: {},
        events: [],

        init: function (config) {
            t.list = config;
            window.addEventListener("resize", t.poll);
            window.addEventListener("orientationchange", t.poll);
            window.addEventListener("load", t.poll);
            window.addEventListener("fullscreenchange", t.poll);
        },

        active: function (query) {
            if (query in t.media) return window.matchMedia(t.media[query]).matches;

            var type, name, min, max, unit = "", condition;

            // Determine query type
            if (query.startsWith(">=")) {
                type = "gte";
                name = query.slice(2);
            } else if (query.startsWith("<=")) {
                type = "lte";
                name = query.slice(2);
            } else if (query.startsWith(">")) {
                type = "gt";
                name = query.slice(1);
            } else if (query.startsWith("<")) {
                type = "lt";
                name = query.slice(1);
            } else if (query.startsWith("!")) {
                type = "not";
                name = query.slice(1);
            } else {
                type = "eq";
                name = query;
            }

            if (!(name in t.list)) return false;

            var range = t.list[name];

            if (Array.isArray(range)) {
                min = parseInt(range[0]);
                max = parseInt(range[1]);
                unit = isNaN(min) ? range[1].replace(/\d+/g, "") : range[0].replace(/\d+/g, "");
            } else {
                condition = range.startsWith("(") ? `screen and ${range}` : `screen and (max-width: ${range})`;
                t.media[query] = condition;
                return window.matchMedia(condition).matches;
            }

            // Construct media query
            switch (type) {
                case "gte":
                    condition = isNaN(min) ? "screen" : `screen and (min-width: ${min}${unit})`;
                    break;
                case "lte":
                    condition = isNaN(max) ? "screen" : `screen and (max-width: ${max}${unit})`;
                    break;
                case "gt":
                    condition = isNaN(max) ? "screen and (max-width: -1px)" : `screen and (min-width: ${max + 1}${unit})`;
                    break;
                case "lt":
                    condition = isNaN(min) ? "screen and (max-width: -1px)" : `screen and (max-width: ${min - 1}${unit})`;
                    break;
                case "not":
                    condition = isNaN(min)
                        ? `screen and (max-width: ${max - 1}${unit})`
                        : `screen and (max-width: ${min - 1}${unit}), screen and (min-width: ${max + 1}${unit})`;
                    break;
                default:
                    condition = `screen and (min-width: ${min}${unit}) and (max-width: ${max}${unit})`;
            }

            t.media[query] = condition;
            return window.matchMedia(condition).matches;
        },

        on: function (query, handler) {
            t.events.push({ query, handler, state: false });

            if (t.active(query)) handler();
        },

        poll: function () {
            for (let event of t.events) {
                const isActive = t.active(event.query);
                if (isActive && !event.state) {
                    event.state = true;
                    event.handler();
                } else if (!isActive && event.state) {
                    event.state = false;
                }
            }
        }
    };

    e._ = t;
    e.on = t.on;
    e.active = t.active;

    return e;
})();

// Module export setup
(function (global, factory) {
    if (typeof define === "function" && define.amd) {
        define([], factory);
    } else if (typeof exports === "object") {
        module.exports = factory();
    } else {
        global.breakpoints = factory();
    }
})(this, function () {
    return breakpoints;
});
