/* browser.js v1.0.1 | @ajlkn | MIT licensed */
var browser = (function () {
    "use strict";

    var t = {
        name: null,
        version: null,
        os: null,
        osVersion: null,
        touch: null,
        mobile: null,
        _canUse: null,

        canUse: function (property) {
            if (!t._canUse) t._canUse = document.createElement("div");

            var style = t._canUse.style;
            var capitalized = property.charAt(0).toUpperCase() + property.slice(1);

            return (
                property in style ||
                "Moz" + capitalized in style ||
                "Webkit" + capitalized in style ||
                "O" + capitalized in style ||
                "ms" + capitalized in style
            );
        },

        init: function () {
            var userAgent = navigator.userAgent;
            var browserName = "other";
            var browserVersion = 0;

            var browsers = [
                ["firefox", /Firefox\/([0-9\.]+)/],
                ["bb", /BlackBerry.+Version\/([0-9\.]+)/],
                ["bb", /BB[0-9]+.+Version\/([0-9\.]+)/],
                ["opera", /OPR\/([0-9\.]+)/],
                ["opera", /Opera\/([0-9\.]+)/],
                ["edge", /Edge\/([0-9\.]+)/],
                ["safari", /Version\/([0-9\.]+).+Safari/],
                ["chrome", /Chrome\/([0-9\.]+)/],
                ["ie", /MSIE ([0-9]+)/],
                ["ie", /Trident\/.+rv:([0-9]+)/]
            ];

            for (let i = 0; i < browsers.length; i++) {
                if (userAgent.match(browsers[i][1])) {
                    browserName = browsers[i][0];
                    browserVersion = parseFloat(RegExp.$1);
                    break;
                }
            }

            t.name = browserName;
            t.version = browserVersion;

            // Detect OS
            var osName = "other";
            var osVersion = 0;

            var operatingSystems = [
                ["ios", /([0-9_]+) like Mac OS X/, (v) => v.replace("_", ".").replace("_", "")],
                ["ios", /CPU like Mac OS X/, () => 0],
                ["wp", /Windows Phone ([0-9\.]+)/, null],
                ["android", /Android ([0-9\.]+)/, null],
                ["mac", /Macintosh.+Mac OS X ([0-9_]+)/, (v) => v.replace("_", ".").replace("_", "")],
                ["windows", /Windows NT ([0-9\.]+)/, null],
                ["bb", /BlackBerry.+Version\/([0-9\.]+)/, null],
                ["bb", /BB[0-9]+.+Version\/([0-9\.]+)/, null],
                ["linux", /Linux/, null],
                ["bsd", /BSD/, null],
                ["unix", /X11/, null]
            ];

            for (let i = 0; i < operatingSystems.length; i++) {
                if (userAgent.match(operatingSystems[i][1])) {
                    osName = operatingSystems[i][0];
                    osVersion = parseFloat(
                        operatingSystems[i][2] ? operatingSystems[i][2](RegExp.$1) : RegExp.$1
                    );
                    break;
                }
            }

            // Detect iOS devices based on screen size
            if (osName === "mac" && "ontouchstart" in window) {
                const iOSDeviceResolutions = [
                    [1024, 1366],
                    [834, 1112],
                    [810, 1080],
                    [768, 1024]
                ];

                for (let [width, height] of iOSDeviceResolutions) {
                    if (screen.width === width && screen.height === height) {
                        osName = "ios";
                        break;
                    }
                }
            }

            t.os = osName;
            t.osVersion = osVersion;

            // Detect touch capability
            t.touch = t.os === "wp" ? navigator.msMaxTouchPoints > 0 : "ontouchstart" in window;

            // Detect mobile device
            t.mobile = ["wp", "android", "ios", "bb"].includes(t.os);
        }
    };

    t.init();
    return t;
})();

// Module export setup
(function (global, factory) {
    if (typeof define === "function" && define.amd) {
        define([], factory);
    } else if (typeof exports === "object") {
        module.exports = factory();
    } else {
        global.browser = factory();
    }
})(this, function () {
    return browser;
});
